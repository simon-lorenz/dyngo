log:
  # Log verbosity. Possible values:
  # trace, debug, info, warning, error, fatal
  level: "debug"

# Available service providers. You only need to specify those that
# you actually use.
services:
  # Here you can add generic services that follow dyndns protocols. This way
  # DynGO might by able to work with services that aren't explicitly supported.
  generic:
    - name: "Some generic service"
      url: "https://generic.service"
      protocol: "dyndns2" #  Currently supported protocols: dyndns2
      username: "mario"
      password: "it's a me"
      domains:
        - name: "mario.generic.service"
          records: []

  # These are explicitly supported services
  desec:
    username: "me.dedyn.io"
    password: "SECRET_TOKEN"
    domains:
      - name: "test.me.dedyn.io"
        records: [A]
      - name: "test2.me.dedyn.io"
        records: [A, AAAA]
  porkbun:
    username: "API_KEY"
    password: "SECRET_KEY"
    domains:
      - name: "test.my.domain"
        records: []

detection:
  # When should DynGO check if your wan ip address has changed?
  triggers:
    # check periodically
    cron: "0 */5 * * * *"

    # check once on program startup
    startup: true

  # How should DynGO check if your wan ip address has changed?
  strategies:
    v4:
      # web: "https://checkipv4.dedyn.io" # Specify a url that returns your ip as a string.
      cmd: "echo '8.8.8.8'"
    v6:
      web: null
      cmd: "echo '2a00:1450:4001:831::2003'" # Use a script that returns your ip as a string.
